//Hashmap
ublic class Solution {
    public ListNode detectCycle(ListNode head) {
        
        HashSet<ListNode> map = new HashSet<>();
        if (head ==null) return null;
        
        
        while (head.next != null){
            if (!map.contains(head)){
                map.add(head);
                head = head.next;
            }else {
                return head;
            }
        }
        
        return null;
        
        
        
    }
}




//Floyd's Tortoise and Hare

ublic class Solution {
    public ListNode detectCycle(ListNode head) {
        ListNode slow= head;
        ListNode fast= head;
        
        while (fast != null && fast.next !=null){
            slow = slow.next;
            fast = fast.next.next;
            if (slow == fast) break;}
            
         if (fast ==null || fast.next == null) return null;
        
        while (head != slow) {
            head = head.next;
            slow = slow.next;
        }
        return head;   
            

        
    }
}
